import java.util.*;

class Solution {
    public int solution(int alp, int cop, int[][] problems) {
        // 현재 알고력과 코딩력을 최대 필요 값으로 맞춤
        int alp_max = 0;
        int cop_max = 0;
        
        for (int[] problem : problems) {
            alp_max = Math.max(alp_max, problem[0]);
            cop_max = Math.max(cop_max, problem[1]);
        }
        
        alp = Math.min(alp, alp_max);
        cop = Math.min(cop, cop_max);

        // dp 배열을 최대 값으로 초기화
        int INF = Integer.MAX_VALUE;
        int[][] dp = new int[alp_max + 1][cop_max + 1];
        for (int[] row : dp) {
            Arrays.fill(row, INF);
        }
        
        dp[alp][cop] = 0;
        
        // dp 계산
        for (int i = alp; i <= alp_max; i++) {
            for (int j = cop; j <= cop_max; j++) {
                // 1. 알고력을 1 증가시키기
                if (i + 1 <= alp_max) {
                    dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j] + 1);
                }
                
                // 2. 코딩력을 1 증가시키기
                if (j + 1 <= cop_max) {
                    dp[i][j + 1] = Math.min(dp[i][j + 1], dp[i][j] + 1);
                }
                
                // 3. 각 문제를 푸는 경우
                for (int[] problem : problems) {
                    int alp_req = problem[0];
                    int cop_req = problem[1];
                    int alp_rwd = problem[2];
                    int cop_rwd = problem[3];
                    int cost = problem[4];
                    
                    if (i >= alp_req && j >= cop_req) {
                        int newAlp = Math.min(alp_max, i + alp_rwd);
                        int newCop = Math.min(cop_max, j + cop_rwd);
                        dp[newAlp][newCop] = Math.min(dp[newAlp][newCop], dp[i][j] + cost);
                    }
                }
            }
        }
        
        return dp[alp_max][cop_max];
    }
}
